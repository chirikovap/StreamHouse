services:

  # PostgreSQL database
  db:
    image: postgres:12
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: sources_table
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./init2.sql:/docker-entrypoint-init2db.d/init2.sql
      - ./init3.sql:/docker-entrypoint-ini3tdb.d/init3.sql

  # DBeaver with VNC
  dbeaver:
    image: dbeaver/cloudbeaver:latest
    restart: always
    ports:
      - "8082:8978" # порт веб-интерфейса CloudBeaver
    environment:
      CB_DB_DRIVER: postgresql
    depends_on:
      - db
    volumes:
      - dbeaver_data:/opt/dbeaver/data # опционально для сохранения конфигурации

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - db

  zookeeper:
    image: bitnami/zookeeper:3.8
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_MESSAGE_MAX_BYTES: 2000000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 2000000000
      KAFKA_FETCH_MAX_BYTES: 2000000000
    depends_on:
      - zookeeper

  kafka-connect:
    image: debezium/connect:1.9
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium-connect-configs
      OFFSET_STORAGE_TOPIC: debezium-connect-offsets
      STATUS_STORAGE_TOPIC: debezium-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_PLUGIN_PATH: /kafka/connect
      TABLES: "public.craft_market_wide,public.craft_market_masters_products,public.craft_market_orders_customers,public.craft_market_craftsmans,public.craft_market_customers,public.craft_market_orders"
    depends_on:
      - kafka

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8182:8182"
    depends_on:
      - kafka
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/sources_table
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      KAFKA_BROKER: kafka:9092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  # Trino for querying Iceberg data
  trino:
    image: trinodb/trino:latest
    ports:
      - "8080:8080"
    environment:
      TRINO_CORES: 2
      TRINO_MEMORY: 2GB
    depends_on:
      - kafka
    volumes:
      - trino_data:/data

  superset:
    image: apache/superset:latest
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: 'mysecretkey'
      FLASK_APP: superset
    command: ["bash", "-c", "superset db upgrade && superset init && gunicorn --bind 0.0.0.0:8088 'superset.app:create_app()'"]
    volumes:
      - superset_data:/var/lib/superset

  flink-jobmanager:
    image: apache/flink:latest
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    ports:
      - "8085:8085"  # Интерфейс Flink

  flink-taskmanager:
    image: apache/flink:latest
    command: taskmanager
    environment:
      - TASK_MANAGER_NUMBER_OF_TASK_SLOTS=2
    depends_on:
      - flink-jobmanager  # TaskManager запускается после JobManager

volumes:
  postgres_data:
  dbeaver_data:
  trino_data:
  superset_data:
